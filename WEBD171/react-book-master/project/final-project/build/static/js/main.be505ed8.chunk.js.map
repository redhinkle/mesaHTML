{"version":3,"sources":["components/Header.js","components/Posts.js","components/Post.js","components/NotFound.js","components/PostForm.js","components/Message.js","components/Login.js","components/VideoList.js","components/Footer.js","firebase.js","App.js","serviceWorker.js","index.js","components/media/colombo.jpg"],"names":["Header","isAuthenticated","onLogout","className","key","to","onClick","e","preventDefault","Posts","posts","deletePost","src","require","alt","length","map","post","id","slug","title","Post","contentHTML","QuillDeltaToHtmlConverter","content","ops","convert","dangerouslySetInnerHTML","__html","NotFound","PostForm","state","props","saved","handlePostForm","updatePost","addNewPost","setState","alert","prevProps","prevState","this","onSubmit","htmlFor","defaultValue","value","onChange","target","delta","source","editor","getContents","type","Component","Message","updated","deleted","Login","email","password","handleLogin","onLogin","name","disabled","url","VideoList","videos","titles","desc","fetch","then","response","json","items","obj","videoId","snippet","description","catch","error","console","class","style","myStyle","list","i","vidStyle","log","width","height","frameBorder","allow","allowFullScreen","React","backgroundColor","marginTop","padding","margin","Footer","textAlign","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","message","auth","signInWithEmailAndPassword","user","signOut","getNewSlugFromTitle","encodeURIComponent","toLowerCase","split","join","postsRef","database","ref","push","setTimeout","index","findIndex","p","slice","concat","newPosts","sort","a","b","window","confirm","filter","parent","exact","path","render","find","match","params","postSlug","component","Boolean","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.be505ed8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = ({ isAuthenticated, onLogout }) => (\r\n  <header>\r\n    <h1>\"Just One More Thing...\"</h1>\r\n    <ul className=\"App-header container\">\r\n      <li key=\"home\">\r\n        <Link to=\"/\">Home</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/episodes\">Episodes</Link>\r\n      </li>\r\n      {isAuthenticated ? (\r\n        <>\r\n          <li>\r\n            <Link to=\"/new\">New Post</Link>\r\n          </li>\r\n          <li>\r\n            <button\r\n              className=\"linkLike\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                onLogout();\r\n              }}\r\n            >\r\n              Logout\r\n            </button>\r\n          </li>\r\n        </>\r\n      ) : (\r\n        <li>\r\n          <Link to=\"/login\">Login</Link>\r\n        </li>\r\n      )}\r\n    </ul>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Will aggregate posts on main page\r\nconst Posts = ({ posts, deletePost, isAuthenticated }) => (\r\n  <article className=\"posts container\">\r\n    <img\r\n      src={require(\"./media/colombo.jpg\")}\r\n      alt=\"Colombo holding a cigar scratching his head\"\r\n    />\r\n    <ul>\r\n      {/* Will display no post message if there are not any */}\r\n      {posts.length < 1 && <li key=\"empty\">No posts yet!</li>}\r\n\r\n      {/* Display Posts with title links */}\r\n      {posts.map((post) => (\r\n        <li key={post.id}>\r\n          <h2>\r\n            <Link to={`/post/${post.slug}`}>{post.title}</Link>\r\n          </h2>\r\n          {isAuthenticated && (\r\n            // Edit post link\r\n            <p>\r\n              <Link to={`/edit/${post.slug}`}>Edit</Link>\r\n              {\" | \"}\r\n              <button\r\n                className=\"linkLike\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  deletePost(post);\r\n                }}\r\n              >\r\n                Delete\r\n              </button>\r\n            </p>\r\n          )}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </article>\r\n);\r\n\r\nexport default Posts;\r\n","import React from \"react\";\r\nimport { QuillDeltaToHtmlConverter } from \"quill-delta-to-html\";\r\n\r\nconst Post = ({ post }) => {\r\n  // Pass QuillDelta and convert it to HTML\r\n  const converter = new QuillDeltaToHtmlConverter(post.content.ops, {});\r\n  const contentHTML = converter.convert();\r\n  return (\r\n    <article className=\"post container\">\r\n      <h1>{post.title}</h1>\r\n      <div\r\n        className=\"content\"\r\n        dangerouslySetInnerHTML={{ __html: contentHTML }}\r\n      />\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NotFound = () => (\r\n  <article className=\"not-found container\">\r\n    <h1>404!</h1>\r\n    <p>\r\n      Content not found. <Link to=\"/\">Retrun to home</Link>\r\n    </p>\r\n  </article>\r\n);\r\n\r\nexport default NotFound;\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Quill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\n\r\nclass PostForm extends Component {\r\n  state = {\r\n    post: {\r\n      key: this.props.post.key,\r\n      slug: this.props.post.slug,\r\n      title: this.props.post.title,\r\n      content: this.props.post.content,\r\n    },\r\n    saved: false,\r\n  };\r\n\r\n  //   Adding new post event handler\r\n  handlePostForm = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.post.title) {\r\n      if (this.props.updatePost) {\r\n        this.props.updatePost(this.state.post);\r\n      } else {\r\n        this.props.addNewPost(this.state.post);\r\n      }\r\n      this.setState({ saved: true });\r\n    } else {\r\n      alert(\"Title required\");\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.post.key !== this.props.post.key) {\r\n      this.setState({\r\n        post: {\r\n          key: this.props.post.key,\r\n          slug: this.props.post.slug,\r\n          title: this.props.post.title,\r\n          content: this.props.post.content,\r\n        },\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    if (this.state.saved === true) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n    return (\r\n      <form className=\"container\" onSubmit={this.handlePostForm}>\r\n        <h1>Add a New Post</h1>\r\n        <p>\r\n          <label htmlFor=\"form-title\">Title:</label>\r\n          <br />\r\n          <input\r\n            defaultValue={this.props.title}\r\n            id=\"form-title\"\r\n            value={this.state.post.title}\r\n            onChange={(e) =>\r\n              this.setState({\r\n                post: { ...this.state.post, title: e.target.value },\r\n              })\r\n            }\r\n          />\r\n        </p>\r\n        <p>\r\n          <label htmlFor=\"form-content\">Content:</label>\r\n        </p>\r\n        <Quill\r\n          defaultValue={this.state.post.content}\r\n          onChange={(content, delta, source, editor) => {\r\n            this.setState({\r\n              post: { ...this.state.post, content: editor.getContents() },\r\n            });\r\n          }}\r\n        />\r\n        <p>\r\n          <button type=\"submit\">Save</button>\r\n        </p>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostForm;\r\n","import React from \"react\";\r\n\r\n// Message component will pass prop of 'type'\r\nconst Message = ({ type }) => {\r\n  const messages = {\r\n    saved: \"Post has been saved!\",\r\n    updated: \"Post has been updated!\",\r\n    deleted: \"Post has been deleted.\",\r\n  };\r\n  return (\r\n    <div className={`App-message ${type}`}>\r\n      <p className=\"container\">\r\n        <strong>{messages[type]}</strong>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Login extends Component {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  handleLogin = (e) => {\r\n    e.preventDefault();\r\n    this.props.onLogin(this.state.email, this.state.password);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"container\" name=\"login\" onSubmit={this.handleLogin}>\r\n        <p>\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            type=\"email\"\r\n            onChange={(e) => this.setState({ email: e.target.value })}\r\n          />\r\n        </p>\r\n        <p>\r\n          <label htmlFor=\"password\">Password:</label>\r\n          <input\r\n            type=\"password\"\r\n            onChange={(e) => this.setState({ password: e.target.value })}\r\n          />\r\n        </p>\r\n        <p>\r\n          <button\r\n            type=\"submit\"\r\n            disabled={!this.state.email && !this.state.password}\r\n          >\r\n            Login\r\n          </button>\r\n        </p>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\n// Main URL\r\n// https://www.googleapis.com/youtube/v3/search?key=AIzaSyCP_mWkFk_r9jgITDf2j8dVdO9A5RkHC9E&channel=UCzXwq43cFscWT4ZX9QbWwZw&part=snippet,id&order=date&maxResults=10\r\n\r\n// URL channel ID, API Key, max num of videos to display (in JSON)\r\nconst channelId = \"UCzXwq43cFscWT4ZX9QbWwZw\";\r\nconst apiKey = \"AIzaSyCP_mWkFk_r9jgITDf2j8dVdO9A5RkHC9E\";\r\nconst numVideos = 10;\r\n\r\n// Complete URL\r\nconst url = `https://www.googleapis.com/youtube/v3/search?key=${apiKey}&channelId=${channelId}&part=snippet,id&order=date&maxResults=${numVideos}`;\r\n\r\nclass VideoList extends React.Component {\r\n  // Blank video state\r\n  state = {\r\n    videos: [],\r\n    titles: [],\r\n    desc: [],\r\n  };\r\n\r\n  //When component mounts, make Youtube API call...\r\n  componentDidMount() {\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        //Create list of youtube links by concatenating each videoID in the JSON object\r\n        const videos = response.items.map(\r\n          (obj) => \"https://www.youtube.com/embed/\" + obj.id.videoId\r\n        );\r\n        this.setState({ videos });\r\n        const titles = response.items.map((obj) => obj.snippet.title);\r\n        this.setState({ titles });\r\n        const desc = response.items.map((obj) => obj.snippet.description);\r\n        this.setState({ desc });\r\n\r\n        // console.log(list);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main class=\"container\">\r\n        <h2>Episodes</h2>\r\n\r\n        <section style={myStyle}>\r\n          {this.state.videos.map((list, i) => {\r\n            //Call the videos in state...\r\n            const video = (\r\n              <div className=\"episodeDiv\" style={vidStyle} key={i}>\r\n                {console.log(this.state.titles[i])}\r\n                <h3>{this.state.titles[i]}</h3>\r\n                <iframe\r\n                  width=\"560\"\r\n                  height=\"315\"\r\n                  src={list}\r\n                  frameBorder=\"0\"\r\n                  allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n                  allowFullScreen\r\n                ></iframe>\r\n                <p>{this.state.desc[i]}</p>\r\n              </div>\r\n            );\r\n            // ...and list them out in individual divs\r\n            return video;\r\n          })}\r\n        </section>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nconst myStyle = {\r\n  backgroundColor: \"rgba(236, 236, 233, 1)\",\r\n  marginTop: \"2rem\",\r\n};\r\n\r\nconst vidStyle = {\r\n  padding: \"0\",\r\n  margin: \"0 auto\",\r\n};\r\n\r\nexport default VideoList;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Footer = (isAuthenticated, onLogout) => (\r\n  <footer>\r\n    <p style={{ margin: \"0 auto\", textAlign: \"center\" }}>2020 Jared Hinkle</p>\r\n    <ul className=\"App-header container\">\r\n      <li key=\"home\">\r\n        <Link to=\"/\">Home</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/episodes\">Episodes</Link>\r\n      </li>\r\n    </ul>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyCDWGB1fXcA2kZNszNdTB_S2ojXLJSwtKg\",\r\n  authDomain: \"react-app-e601c.firebaseapp.com\",\r\n  databaseURL: \"https://react-app-e601c.firebaseio.com\",\r\n  projectId: \"react-app-e601c\",\r\n  storageBucket: \"react-app-e601c.appspot.com\",\r\n  messagingSenderId: \"795414432503\",\r\n  appId: \"1:795414432503:web:79070a5bd71f139c36a1f2\",\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./normalize.css\";\nimport Header from \"./components/Header\";\nimport Posts from \"./components/Posts\";\nimport Post from \"./components/Post\";\nimport NotFound from \"./components/NotFound\";\nimport PostForm from \"./components/PostForm\";\nimport Message from \"./components/Message\";\nimport Login from \"./components/Login\";\nimport VideoList from \"./components/VideoList\";\nimport Footer from \"./components/Footer\";\nimport firebase from \"./firebase\";\nimport SimpleStorage from \"react-simple-storage\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nclass App extends Component {\n  state = {\n    isAuthenticated: false,\n    posts: [],\n    message: null,\n  };\n\n  // Login Function\n  onLogin = (email, password) => {\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then((user) => {\n        this.setState({ isAuthenticated: true });\n      })\n      .catch((error) => console.error(error));\n  };\n\n  // Logout Function\n  onLogout = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        this.setState({ isAuthenticated: false });\n      })\n      .catch((error) => console.error(error));\n  };\n  // set new slug by taking title and joining spaces with a '-'\n  getNewSlugFromTitle = (title) =>\n    encodeURIComponent(title.toLowerCase().split(\" \").join(\"-\"));\n\n  // ADD--------------------------------------------------------------------------\n  addNewPost = (post) => {\n    // Create reference to firebase database\n    const postsRef = firebase.database().ref(\"posts\");\n    post.slug = this.getNewSlugFromTitle(post.title);\n    delete post.key;\n    postsRef.push(post);\n    this.setState({\n      // Add new post to state posts and set message to saved\n      message: \"saved\",\n    });\n    // Reset message to stop displaying, will cause Message component to unmount\n    setTimeout(() => {\n      this.setState({ message: null });\n    }, 1600);\n  };\n\n  // UPDATE----------------------------------------------------------------------\n  updatePost = (post) => {\n    // Set new slug title\n    post.slug = this.getNewSlugFromTitle(post.title);\n    // Find the index of the first post that has the same slug\n    const index = this.state.posts.findIndex((p) => p.id === post.id);\n    // Use index to remove edited post from state and add the new post back in\n    const posts = this.state.posts\n      .slice(0, index)\n      .concat(this.state.posts.slice(index + 1));\n    // Add new post in and resort them\n    const newPosts = [...posts, post].sort((a, b) => a.id - b.id);\n    this.setState({\n      posts: newPosts,\n      message: \"updated\",\n    });\n    setTimeout(() => {\n      this.setState({ message: null });\n    }, 1600);\n  };\n\n  // DELETE--------------------------------------------------------------------\n  deletePost = (post) => {\n    if (window.confirm(\"Delete this post?\")) {\n      const posts = this.state.posts.filter((p) => p.id !== post.id);\n      this.setState({ posts, message: \"deleted\" });\n      setTimeout(() => {\n        this.setState({ message: null });\n      }, 1600);\n    }\n  };\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <SimpleStorage parent={this} />\n\n          <Header\n            isAuthenticated={this.state.isAuthenticated}\n            onLogout={this.onLogout}\n          />\n\n          {/* Render the state message and Message component if it is true */}\n          {this.state.message && <Message type={this.state.message} />}\n\n          <Switch>\n            <Route\n              // Displays the posts on the homepage, essentially renders Posts component on page\n              exact\n              path=\"/\"\n              render={() => (\n                <Posts\n                  isAuthenticated={this.state.isAuthenticated}\n                  posts={this.state.posts}\n                  deletePost={this.deletePost}\n                />\n              )}\n            />\n\n            <Route exact path=\"/episodes\" render={() => <VideoList />} />\n\n            <Route\n              // Defining the path that will load Post component\n              path=\"/post/:postSlug\"\n              // Checking to find the post that matches the url with match prop from React-Router\n              render={(props) => {\n                const post = this.state.posts.find(\n                  (post) => post.slug === props.match.params.postSlug\n                );\n                // Once collected from state it will return the post prop in the Post component\n                if (post) return <Post post={post} />;\n                // If not found go to 404\n                else return <NotFound />;\n              }}\n            />\n\n            <Route\n              exact\n              path=\"/login\"\n              render={() =>\n                !this.state.isAuthenticated ? (\n                  <Login onLogin={this.onLogin} />\n                ) : (\n                  <Redirect to=\"/\" />\n                )\n              }\n            />\n\n            <Route\n              // To new post page (using PostForm component)\n              exact\n              path=\"/new\"\n              // pass addNewPost funtion as a prop\n              render={() =>\n                this.state.isAuthenticated ? (\n                  <PostForm\n                    addNewPost={this.addNewPost}\n                    post={{ key: null, slug: \"\", title: \"\", content: \"\" }}\n                  />\n                ) : (\n                  <Redirect to=\"/login\" />\n                )\n              }\n            />\n\n            <Route\n              // To edit page\n              path=\"/edit/:postSlug\"\n              // Render props with slug\n              render={(props) => {\n                const post = this.state.posts.find(\n                  (post) => post.slug === props.match.params.postSlug\n                );\n                // if there is a slug...move to the edit page\n                if (post && this.state.isAuthenticated) {\n                  return <PostForm updatePost={this.updatePost} post={post} />;\n                  // Else redirect\n                } else if (post && !this.state.isAuthenticated) {\n                  return <Redirect to=\"/login\" />;\n                } else {\n                  return <Redirect to=\"/\" />;\n                }\n              }}\n            />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n        <Footer />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/colombo.1321a2d8.jpg\";"],"sourceRoot":""}